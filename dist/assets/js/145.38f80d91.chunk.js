(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{781:function(e,r,n){"use strict";n.r(r),r.default="var bloomStrength = 1.0;\nvar RenderPass = Hilo3d.Class.create({\n    Mixes: Hilo3d.EventMixin,\n    /**\n     * @constructor\n     * @param {WebGLRenderer} renderer\n     * @param {Object} params\n     * @param {Number} params.width\n     * @param {Number} params.height\n     * @param {Boolean} params.renderToScreen\n     * @param {Object} params.framebufferOption\n     */\n    constructor:function(renderer, params){\n        this.renderer = renderer;\n        Object.assign(this, params);\n        if (!this.width) {\n            this.width = renderer.width;\n        }\n\n        if (!this.height) {\n            this.height = renderer.height;\n        }\n\n        if (!this.renderToScreen){\n            var framebuffer = this.framebuffer = new Hilo3d.Framebuffer(renderer, Object.assign({\n                width:this.width,\n                height:this.height\n            }, params.framebufferOption));\n            renderer.onInit(function(){\n                framebuffer.init();\n            });\n        }\n    },\n    _render:function(renderer, lastPass){\n        this.lastPass = lastPass;\n        renderer.state.viewport(0, 0, this.width, this.height);\n        if (this.renderToScreen) {\n            renderer.state.bindSystemFramebuffer();\n        } else {\n            this.framebuffer.bind();\n        }\n\n        var useFramebuffer = renderer.useFramebuffer;\n        renderer.useFramebuffer = false;\n\n        this.render(renderer, lastPass);\n        \n        renderer.viewport();\n        renderer.useFramebuffer = useFramebuffer;\n\n        this.fire('afterRender');\n    },\n    /**\n     * \u5b50\u7c7b\u9700\u5b9e\u73b0\n     * @param  {WebGLRenderer} renderer\n     */\n    render:function(renderer, lastPass){\n\n    },\n    addTo(postProcessRenderer){\n        postProcessRenderer.addPass(this);\n        return this;\n    }\n});\n\nvar ScreenShaderPass = Hilo3d.Class.create({\n    Extends:RenderPass,\n    /**\n     * @constructor\n     * @param  {Object} params\n     * @param {String} params.frag\n     * @param {Object} params.uniforms\n     */\n    constructor:function(renderer, params){\n        ScreenShaderPass.superclass.constructor.call(this, renderer, params);\n        var that = this;\n        this.scene = new Hilo3d.Node();\n        this.mesh = this._createMesh().addTo(this.scene);\n        this.camera = new Hilo3d.Camera();\n    },\n    render:function(renderer, lastPass){\n        renderer.render(this.scene, this.camera);\n    },\n    _createMesh(){\n        var that = this;\n        var mesh = new Hilo3d.Mesh({\n            geometry:this._createGeometry(),\n            material:new Hilo3d.ShaderMaterial({\n                vs:Hilo3d.Shader.shaders['screen.vert'],\n                fs:this.frag,\n                depthTest:false,\n                side:Hilo3d.constants.FRONT_AND_BACK,\n                uniforms:Object.assign({\n                    u_lastTexture:{\n                        get:function(mesh, material, programInfo){\n                            var lastPass = that.lastPass;\n                            if (lastPass && lastPass.framebuffer){\n                                return Hilo3d.semantic.handlerTexture(lastPass.framebuffer.texture, programInfo.textureIndex);\n                            }\n                        }\n                    }\n                },this.uniforms)\n            })\n        });\n        return mesh;\n    },\n    _createGeometry(){\n        if (!this.geometry) {\n            var geometry = this.geometry = new Hilo3d.Geometry({\n                mode:Hilo3d.constants.TRIANGLE_STRIP\n            });\n            var x = - 1;\n            var y = 1;\n            width = 2;\n            height = 2;\n            const vertices = [x, y, x + width, y, x, y - height, x + width, y - height];\n            geometry.vertices = new Hilo3d.GeometryData(new Float32Array(vertices), 2);\n            geometry.uvs = new Hilo3d.GeometryData(new Float32Array([0, 1, 1, 1, 0, 0, 1, 0]), 2);\n        }\n        return this.geometry;\n    }\n});\n\nvar ShaderPass = Hilo3d.Class.create({\n    Extends:RenderPass,\n    /**\n     * @constructor\n     * @param  {WebGLRenderer} renderer \n     * @param  {Object} params   \n     * @param  {Object} params.forceMaterial   \n     * @param  {Object} params.scene   \n     * @param  {Object} params.camera   \n     */\n    constructor:function(renderer, params){\n        ShaderPass.superclass.constructor.call(this, renderer, params);\n    },\n    render:function(renderer, lastPass){\n        var forceMaterial = renderer.forceMaterial;\n        renderer.forceMaterial = this.forceMaterial;\n        renderer.render(this.scene, this.camera);\n        renderer.forceMaterial = forceMaterial;\n    }\n});\n\nvar PostProcessRenderer = Hilo3d.Class.create({\n    constructor:function(renderer){\n        this.renderer = renderer;\n        this.passes = [];\n    },\n    render:function(){\n        var renderer = this.renderer;\n        var lastPass;\n        this.passes.forEach(function(pass, index){\n            pass._render(renderer, lastPass);\n            lastPass = pass;\n        });\n\n        renderer.state.bindSystemFramebuffer();\n    },\n    addPass:function(pass){\n        this.passes.push(pass);\n    },\n    clear:function(){\n        this.passes.length = 0;\n    }\n});\n\nvar postProcessRenderer = new PostProcessRenderer(renderer);\nrenderer.on('afterRender', function(){\n    postProcessRenderer.render();\n});\n\nrenderer.useFramebuffer = true;\n\nvar getLigthPass = new ScreenShaderPass(renderer, {\n    frag:`\n        precision HILO_MAX_FRAGMENT_PRECISION float;\\n\\\n        varying vec2 v_texcoord0;\\n\\\n        uniform sampler2D u_screen;\\n\\\n        void main(void) {\\n\\\n            vec4 color = texture2D(u_screen, v_texcoord0);\\n\\\n            float brightness = dot(color.rgb, vec3(0.2126, 0.7152, 0.0722));\\n\\\n            if(brightness > .4){\n                gl_FragColor = vec4(color.rgb, 1.0);\\n\\\n            }\n        }\n    `,\n    uniforms:{\n        u_screen:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(renderer.framebuffer.texture, programInfo.textureIndex)\n            }\n        }\n    }\n}).addTo(postProcessRenderer);\n\nconst blurPasses = [];\nfor(var i = 0;i < 5;i ++){\n    (function(){\n        var blurWidth = Math.ceil(renderer.width/Math.pow(2, i));\n        var blurHeight = Math.ceil(renderer.height/Math.pow(2, i));\n        var u_textureSize = new Float32Array([blurWidth, blurHeight]);\n        var blurIndex = 0;\n        var blurXPass = new ScreenShaderPass(renderer, {\n            width:blurWidth,\n            height:blurHeight,\n            frag:`\\n\\\n            precision HILO_MAX_FRAGMENT_PRECISION float;\\n\\\n            uniform sampler2D u_lightTexture;\n            varying vec2 v_texcoord0;\\n\\\n            uniform vec2 u_textureSize;\n\n            float weight[5];\n\n            void main()\n            {         \n                weight[0] = 0.227027;\n                weight[1] = 0.1945946;\n                weight[2] = 0.1216216;\n                weight[3] = 0.054054;\n                weight[4] = 0.016216;\n                vec2 tex_offset =  vec2(1.0/u_textureSize.x, 1.0/u_textureSize.y);\n                vec3 result = texture2D(u_lightTexture, v_texcoord0).rgb * weight[0];\n\n                for(int i = 1; i < 5; ++i){\n                    result += texture2D(u_lightTexture, v_texcoord0 + vec2(vec2(tex_offset.x * float(i), 0.0))).rgb * weight[i];\n                    result += texture2D(u_lightTexture, v_texcoord0 - vec2(tex_offset.x * float(i), 0.0)).rgb * weight[i];\n                }\n                       \n                gl_FragColor = vec4(result, 1.0);\n            }`,\n            uniforms:{\n                u_textureSize:{\n                    get:()=> {\n                        return u_textureSize;\n                    }\n                },\n                u_lightTexture:{\n                    get:(mesh, material, programInfo) => {\n                        return Hilo3d.semantic.handlerTexture(getLigthPass.framebuffer.texture, programInfo.textureIndex);\n                    }\n                }\n            }\n        });\n        window.blurYPass = new ScreenShaderPass(renderer, {\n            width:blurWidth,\n            height:blurHeight,\n            framebufferOption:{\n                minFilter:Hilo3d.constants.NEAREST,\n                magFilter:Hilo3d.constants.LINEAR\n            },\n            frag:`\\n\\\n            precision HILO_MAX_FRAGMENT_PRECISION float;\\n\\\n            uniform sampler2D u_lastTexture;\n            varying vec2 v_texcoord0;\\n\\\n            uniform vec2 u_textureSize;\n\n            float weight[5];\n\n            void main()\n            {         \n                weight[0] = 0.227027;\n                weight[1] = 0.1945946;\n                weight[2] = 0.1216216;\n                weight[3] = 0.054054;\n                weight[4] = 0.016216;\n                vec2 tex_offset =  vec2(1.0/u_textureSize.x, 1.0/u_textureSize.y);\n                vec3 result = texture2D(u_lastTexture, v_texcoord0).rgb * weight[0];\n\n                for(int i = 1; i < 5; ++i){\n                    result += texture2D(u_lastTexture, v_texcoord0 + vec2(vec2(0.0, tex_offset.x * float(i)))).rgb * weight[i];\n                    result += texture2D(u_lastTexture, v_texcoord0 - vec2(0.0, tex_offset.x * float(i))).rgb * weight[i];\n                } \n                       \n                gl_FragColor = vec4(result, 1.0);\n            }`,\n            uniforms:{\n                u_textureSize:{\n                    get:()=> {\n                        return u_textureSize;\n                    }\n                }\n            }\n        });\n        postProcessRenderer.addPass(blurXPass);\n        postProcessRenderer.addPass(blurYPass);\n        blurPasses.push(blurYPass);\n    })();\n}\n\nvar CombinePass = new ScreenShaderPass(renderer, {\n    frag:`\n        precision HILO_MAX_FRAGMENT_PRECISION float;\\n\\\n        uniform sampler2D u_blurTexture0;\n        uniform sampler2D u_blurTexture1;\n        uniform sampler2D u_blurTexture2;\n        uniform sampler2D u_blurTexture3;\n        uniform sampler2D u_blurTexture4;\n        uniform sampler2D u_scene;\n        uniform float u_bloomStrength;\n        varying vec2 v_texcoord0;\\n\\\n\n        void main()\n        {       \n            vec3 color = vec3(0.0);\n            color += texture2D(u_scene, v_texcoord0).rgb;      \n            color += texture2D(u_blurTexture0, v_texcoord0).rgb * u_bloomStrength;\n            color += texture2D(u_blurTexture1, v_texcoord0).rgb * u_bloomStrength;\n            color += texture2D(u_blurTexture2, v_texcoord0).rgb * u_bloomStrength;\n            color += texture2D(u_blurTexture3, v_texcoord0).rgb * u_bloomStrength;\n            color += texture2D(u_blurTexture4, v_texcoord0).rgb * u_bloomStrength;\n            vec3 result = color;\n            result = vec3(1.0) - exp(-color * 0.8);\n\n            gl_FragColor = vec4(result, 0);\n        }\n    `,\n    uniforms:{\n        u_scene:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(renderer.framebuffer.texture, programInfo.textureIndex)\n            }\n        },\n        u_blurTexture0:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(blurPasses[0].framebuffer.texture, programInfo.textureIndex);\n            }\n        },\n        u_blurTexture1:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(blurPasses[1].framebuffer.texture, programInfo.textureIndex);\n            }\n        },\n        u_blurTexture2:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(blurPasses[2].framebuffer.texture, programInfo.textureIndex);\n            }\n        },\n        u_blurTexture3:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(blurPasses[3].framebuffer.texture, programInfo.textureIndex);\n            }\n        },\n        u_blurTexture4:{\n            get:function(mesh, material, programInfo){\n                return Hilo3d.semantic.handlerTexture(blurPasses[4].framebuffer.texture, programInfo.textureIndex);\n            }\n        },\n        u_bloomStrength:{\n            get:function(){\n                return bloomStrength;\n            }\n        }\n    },\n    renderToScreen:true\n}).addTo(postProcessRenderer);\n\nvar random = function(min, max){\n    return Math.random() * (max - min) + min;\n};\nvar initScene = function(){\n    camera.far = 5;\n    stage.rotationX = 25;\n    \n    var boxGeometry = new Hilo3d.BoxGeometry();\n    boxGeometry.setAllRectUV([[0, 1], [1, 1], [1, 0], [0, 0]]);\n    var sphereGeometry = new Hilo3d.SphereGeometry({\n        radius:0.7\n    });\n\n    for(var i = 0;i < 50; i ++) {\n        var lightMinValue = 0.5;\n        var lightMaxValue = 1;\n        var colorBox = new Hilo3d.Mesh({\n            geometry: random(0, 1)>0.5?boxGeometry:sphereGeometry,\n            material: new Hilo3d.BasicMaterial({\n                lightType:'NONE',\n                diffuse: new Hilo3d.Color(random(lightMinValue, lightMaxValue), random(lightMinValue, lightMaxValue), random(lightMinValue, lightMaxValue))\n            }),\n            x:random(-1.5, 1.5),\n            y:random(-1.5, 1.5),\n            z:random(-1.5, 1.5),\n            v:random(0.5, 1),\n            onUpdate: function() {\n                this.rotationX += this.v;\n                this.rotationY += this.v;\n            }\n        });\n        stage.addChild(colorBox);\n        colorBox.setScale(random(0.05, 0.08));\n    }\n\n    stage.onUpdate = function(){\n        this.rotationX += 0.5;\n        this.rotationY += 0.5;\n    }\n}\n\ninitScene();\n\nHilo3d.Tween.to({num:0}, {num:0.8}, {\n    ease:Hilo3d.Tween.Ease.Quad.EaseOut,\n    duration:1000,\n    loop: true,\n    reverse: true,\n    onUpdate:function(){\n        bloomStrength = this.target.num;\n    }\n});"}}]);