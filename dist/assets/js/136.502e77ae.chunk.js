(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{770:function(e,n,r){"use strict";r.r(n),n.default="renderer.on('init', function(){\nconsole.log('init');\nscale = 8;\nwidth = Math.floor(innerWidth/scale);\nheight = Math.floor(innerHeight/scale)\ntotalTile = width * height;\nlifegameData = new Uint8Array(totalTile*4);\nfor(var i = 0;i < totalTile;i ++){\n    lifegameData[i * 4 + 2] = Math.random() < 0.6 ? 255:0;\n}\n\nlifegameFramebuffer = new Hilo3d.Framebuffer(renderer, {\n    needRenderbuffer:false,\n    width:width,\n    height:height,\n    data:lifegameData\n});\n\nlifegameFramebuffer.bind();\nlifegameFramebuffer.backTexture = lifegameFramebuffer.texture;\nlifegameFramebuffer.frontTexture = lifegameFramebuffer.createTexture();\nlifegameFramebuffer.unbind();\n});\n\npostProcess.init(renderer);\nrenderer.on('afterRender', function(){\nlifegameFramebuffer.bind();\nlifegameFramebuffer.texture = lifegameFramebuffer.backTexture;\nrenderer.gl.framebufferTexture2D(renderer.gl.FRAMEBUFFER, lifegameFramebuffer.attachment, lifegameFramebuffer.target, lifegameFramebuffer.texture.getGLTexture(renderer.state), 0);\n\npostProcess.draw(lifegameFramebuffer.frontTexture, {\n    uniforms:{\n        u_size:new Float32Array([width, height])\n    },\n    frag:`\n        precision HILO_MAX_FRAGMENT_PRECISION float;\n        varying vec2 v_texcoord0;\n        uniform sampler2D u_diffuse;\n        uniform vec2 u_size;\n        int get(int x, int y) {\n            return int(texture2D(u_diffuse, (gl_FragCoord.xy + vec2(x, y)) / u_size).b);\n        }\n\n        void main(void) {\n            int sum = get(-1, -1) +\n                  get(-1,  0) +\n                  get(-1,  1) +\n                  get( 0, -1) +\n                  get( 0,  1) +\n                  get( 1, -1) +\n                  get( 1,  0) +\n                  get( 1,  1);\n\n            if (sum == 3) {\n                gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\n            } else if (sum == 2) {\n                float current = float(get(0, 0));\n                gl_FragColor = vec4(current, current, current, 1.0);\n            } else {\n                gl_FragColor = vec4(.0, .0, .0, .0);\n            }\n        }\n    `\n});\n\nvar temp = lifegameFramebuffer.backTexture;\nlifegameFramebuffer.backTexture = lifegameFramebuffer.frontTexture;\nlifegameFramebuffer.frontTexture = temp;\n\nlifegameFramebuffer.unbind()\nlifegameFramebuffer.render();\n});\n\ndocument.addEventListener('click', function(e){\nvar x = Math.floor(e.offsetX/scale);\nvar y = Math.floor(height - e.offsetY/scale);\nx = Math.min(width-1, x);\ny = Math.min(height-1, y);\n\ngl.bindTexture(gl.TEXTURE_2D, lifegameFramebuffer.frontTexture.getGLTexture(renderer.state));\ngl.texSubImage2D(gl.TEXTURE_2D, 0, x, y, 1, 1,\n                 gl.RGBA, gl.UNSIGNED_BYTE,\n                 new Uint8Array([255, 255, 255, 255]));\ngl.bindTexture(gl.TEXTURE_2D, lifegameFramebuffer.backTexture.getGLTexture(renderer.state));\ngl.texSubImage2D(gl.TEXTURE_2D, 0, x, y, 1, 1,\n                 gl.RGBA, gl.UNSIGNED_BYTE,\n                 new Uint8Array([255, 255, 255, 255]));\n});\n\nticker._targetFPS = 24;\nticker._interval = 1000 / ticker._targetFPS;"}}]);